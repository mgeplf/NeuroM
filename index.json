{
    "benchmarks": {
        "benchmarks.TimeChecks.time_has_all_finite_radius_neurites": {
            "code": "def time_has_all_finite_radius_neurites(self):\n    sc.has_all_finite_radius_neurites(self.data_wrapper, threshold=0.0)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_all_finite_radius_neurites", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_all_finite_radius_neurites", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_all_monotonic_neurites": {
            "code": "def time_has_all_monotonic_neurites(self):\n    nc.has_all_monotonic_neurites(self.neuron, tol=1e-6)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_all_monotonic_neurites", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_all_monotonic_neurites", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_all_nonzero_neurite_radii": {
            "code": "def time_has_all_nonzero_neurite_radii(self):\n    nc.has_all_nonzero_neurite_radii(self.neuron, threshold=0.0)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_all_nonzero_neurite_radii", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_all_nonzero_neurite_radii", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_all_nonzero_section_lengths": {
            "code": "def time_has_all_nonzero_section_lengths(self):\n    nc.has_all_nonzero_section_lengths(self.neuron, threshold=0.0)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_all_nonzero_section_lengths", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_all_nonzero_section_lengths", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_all_nonzero_segment_lengths": {
            "code": "def time_has_all_nonzero_segment_lengths(self):\n    nc.has_all_nonzero_segment_lengths(self.neuron, threshold=0.0)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_all_nonzero_segment_lengths", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_all_nonzero_segment_lengths", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_apical_dendrite": {
            "code": "def time_has_apical_dendrite(self):\n    nc.has_apical_dendrite(self.neuron, min_number=1)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_apical_dendrite", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_apical_dendrite", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_axon": {
            "code": "def time_has_axon(self):\n    nc.has_axon(self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_axon", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_axon", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_basal_dendrite": {
            "code": "def time_has_basal_dendrite(self):\n    nc.has_basal_dendrite(self.neuron, min_number=1)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_basal_dendrite", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_basal_dendrite", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_increasing_ids": {
            "code": "def time_has_increasing_ids(self):\n    sc.has_increasing_ids(self.data_wrapper)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_increasing_ids", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_increasing_ids", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_no_fat_ends": {
            "code": "def time_has_no_fat_ends(self):\n    nc.has_no_fat_ends(self.neuron, multiple_of_mean=2.0, final_point_count=5)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_no_fat_ends", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_no_fat_ends", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_no_flat_neurites": {
            "code": "def time_has_no_flat_neurites(self):\n    nc.has_no_flat_neurites(self.neuron, tol=0.1, method='ratio')\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_no_flat_neurites", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_no_flat_neurites", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_no_jumps": {
            "code": "def time_has_no_jumps(self):\n    nc.has_no_jumps(self.neuron, max_distance=30.0, axis='z')\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_no_jumps", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_no_jumps", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_nonzero_soma_radius": {
            "code": "def time_has_nonzero_soma_radius(self):\n    nc.has_nonzero_soma_radius(self.neuron, threshold=0.0)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_nonzero_soma_radius", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_nonzero_soma_radius", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_sequential_ids": {
            "code": "def time_has_sequential_ids(self):\n    sc.has_sequential_ids(self.data_wrapper)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_sequential_ids", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_sequential_ids", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_soma_points": {
            "code": "def time_has_soma_points(self):\n    sc.has_soma_points(self.data_wrapper)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_soma_points", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_soma_points", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_valid_neurites": {
            "code": "def time_has_valid_neurites(self):\n    sc.has_valid_neurites(self.data_wrapper)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_valid_neurites", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_valid_neurites", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_has_valid_soma": {
            "code": "def time_has_valid_soma(self):\n    sc.has_valid_soma(self.data_wrapper)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_has_valid_soma", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_has_valid_soma", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_is_single_tree": {
            "code": "def time_is_single_tree(self):\n    sc.is_single_tree(self.data_wrapper)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_is_single_tree", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_is_single_tree", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeChecks.time_no_missing_parents": {
            "code": "def time_no_missing_parents(self):\n    sc.no_missing_parents(self.data_wrapper)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeChecks.time_no_missing_parents", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeChecks.time_no_missing_parents", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_local_bifurcation_angles": {
            "code": "def time_local_bifurcation_angles(self):\n    nm.get('local_bifurcation_angles', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_local_bifurcation_angles", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_local_bifurcation_angles", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_number_of_bifurcations": {
            "code": "def time_number_of_bifurcations(self):\n    nm.get('number_of_bifurcations', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_number_of_bifurcations", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_number_of_bifurcations", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_number_of_forking_points": {
            "code": "def time_number_of_forking_points(self):\n    nm.get('number_of_forking_points', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_number_of_forking_points", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_number_of_forking_points", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_number_of_neurites": {
            "code": "def time_number_of_neurites(self):\n    nm.get('number_of_neurites', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_number_of_neurites", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_number_of_neurites", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_number_of_sections": {
            "code": "def time_number_of_sections(self):\n    nm.get('number_of_sections', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_number_of_sections", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_number_of_sections", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_number_of_sections_per_neurite": {
            "code": "def time_number_of_sections_per_neurite(self):\n    nm.get('number_of_sections_per_neurite', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_number_of_sections_per_neurite", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_number_of_sections_per_neurite", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_number_of_segments": {
            "code": "def time_number_of_segments(self):\n    nm.get('number_of_segments', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_number_of_segments", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_number_of_segments", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_number_of_terminations": {
            "code": "def time_number_of_terminations(self):\n    nm.get('number_of_terminations', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_number_of_terminations", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_number_of_terminations", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_partition": {
            "code": "def time_partition(self):\n    nm.get('partition', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_partition", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_partition", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_principal_direction_extents": {
            "code": "def time_principal_direction_extents(self):\n    nm.get('principal_direction_extents', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_principal_direction_extents", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_principal_direction_extents", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_remote_bifurcation_angles": {
            "code": "def time_remote_bifurcation_angles(self):\n    nm.get('remote_bifurcation_angles', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_remote_bifurcation_angles", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_remote_bifurcation_angles", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_section_areas": {
            "code": "def time_section_areas(self):\n    nm.get('section_areas', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_section_areas", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_section_areas", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_section_branch_orders": {
            "code": "def time_section_branch_orders(self):\n    nm.get('section_branch_orders', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_section_branch_orders", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_section_branch_orders", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_section_lengths": {
            "code": "def time_section_lengths(self):\n    nm.get('section_lengths', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_section_lengths", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_section_lengths", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_section_path_distances": {
            "code": "def time_section_path_distances(self):\n    nm.get('section_path_distances', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_section_path_distances", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_section_path_distances", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_section_radial_distances": {
            "code": "def time_section_radial_distances(self):\n    nm.get('section_radial_distances', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_section_radial_distances", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_section_radial_distances", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_section_tortuosity": {
            "code": "def time_section_tortuosity(self):\n    nm.get('section_tortuosity', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_section_tortuosity", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_section_tortuosity", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_section_volumes": {
            "code": "def time_section_volumes(self):\n    nm.get('section_volumes', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_section_volumes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_section_volumes", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_segment_lengths": {
            "code": "def time_segment_lengths(self):\n    nm.get('segment_lengths', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_segment_lengths", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_segment_lengths", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_segment_meander_angles": {
            "code": "def time_segment_meander_angles(self):\n    nm.get('segment_meander_angles', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_segment_meander_angles", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_segment_meander_angles", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_segment_midpoints": {
            "code": "def time_segment_midpoints(self):\n    nm.get('segment_midpoints', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_segment_midpoints", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_segment_midpoints", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_segment_radial_distances": {
            "code": "def time_segment_radial_distances(self):\n    nm.get('segment_radial_distances', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_segment_radial_distances", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_segment_radial_distances", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_segment_radii": {
            "code": "def time_segment_radii(self):\n    nm.get('segment_radii', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_segment_radii", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_segment_radii", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_segment_taper_rates": {
            "code": "def time_segment_taper_rates(self):\n    nm.get('segment_taper_rates', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_segment_taper_rates", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_segment_taper_rates", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_total_length": {
            "code": "def time_total_length(self):\n    nm.get('total_length', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_total_length", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_total_length", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeFeatures.time_total_length_per_neurite": {
            "code": "def time_total_length_per_neurite(self):\n    nm.get('total_length_per_neurite', self.neuron)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeFeatures.time_total_length_per_neurite", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeFeatures.time_total_length_per_neurite", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeLoadMorphology.time_h5": {
            "code": "def time_h5(self):\n    path = os.path.join(DATA_DIR, 'h5/v1/bio_neuron-000.h5')\n    nm.load_neuron(path)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeLoadMorphology.time_h5", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeLoadMorphology.time_h5", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeLoadMorphology.time_neurolucida_asc": {
            "code": "def time_neurolucida_asc(self):\n    path = os.path.join(DATA_DIR, 'neurolucida/bio_neuron-000.asc')\n    nm.load_neuron(path)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeLoadMorphology.time_neurolucida_asc", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeLoadMorphology.time_neurolucida_asc", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeLoadMorphology.time_swc": {
            "code": "def time_swc(self):\n    path = os.path.join(DATA_DIR, 'swc/Neuron.swc')\n    nm.load_neuron(path)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeLoadMorphology.time_swc", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "pretty_name": "benchmarks.TimeLoadMorphology.time_swc", 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }
    }, 
    "graph_param_list": [
        {
            "arch": "x86_64", 
            "branch": "master", 
            "cpu": "Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz", 
            "machine": "bluebrain095", 
            "os": "Linux 4.4.0-36-generic", 
            "python": "2.7", 
            "ram": "16357008"
        }
    ], 
    "hash_length": 8, 
    "machines": {
        "bluebrain095": {
            "arch": "x86_64", 
            "cpu": "Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz", 
            "machine": "bluebrain095", 
            "os": "Linux 4.4.0-36-generic", 
            "ram": "16357008", 
            "version": 1
        }
    }, 
    "pages": [
        [
            "", 
            "Grid view", 
            "Display as a agrid"
        ], 
        [
            "summarylist", 
            "List view", 
            "Display as a list"
        ], 
        [
            "regressions", 
            "Show regressions", 
            "Display information about recent regressions"
        ]
    ], 
    "params": {
        "arch": [
            "x86_64"
        ], 
        "branch": [
            "master"
        ], 
        "cpu": [
            "Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz"
        ], 
        "machine": [
            "bluebrain095"
        ], 
        "os": [
            "Linux 4.4.0-36-generic"
        ], 
        "python": [
            "2.7"
        ], 
        "ram": [
            "16357008"
        ]
    }, 
    "project": "NeuroM", 
    "project_url": "https://github.com/BlueBrain/NeuroM/", 
    "revision_to_date": {
        "148": 1438095989000, 
        "149": 1438155761000, 
        "153": 1438262261000, 
        "154": 1438263341000, 
        "160": 1438355344000, 
        "161": 1438356300000, 
        "176": 1439472580000, 
        "207": 1440081045000, 
        "209": 1440161555000, 
        "211": 1440162692000, 
        "214": 1440164950000, 
        "239": 1440601290000, 
        "241": 1440608703000, 
        "273": 1441202489000, 
        "275": 1441205157000, 
        "280": 1442416477000, 
        "282": 1442418870000, 
        "284": 1442491997000, 
        "323": 1443429815000, 
        "328": 1443521042000, 
        "342": 1443706743000, 
        "435": 1444721541000, 
        "881": 1451118865000, 
        "1015": 1453824967000, 
        "1032": 1454666959000, 
        "1125": 1456493580000, 
        "1139": 1458642833000, 
        "1314": 1463999580000, 
        "1316": 1464001902000, 
        "1393": 1466417342000, 
        "1502": 1468494599000, 
        "1504": 1468573682000, 
        "1508": 1469531471000, 
        "1586": 1473077835000, 
        "1588": 1473177794000, 
        "1590": 1473192785000, 
        "1592": 1473753107000, 
        "1594": 1474544065000, 
        "1596": 1474552556000, 
        "1599": 1474895987000, 
        "1600": 1473344150000, 
        "1601": 1473344278000, 
        "1602": 1473344389000, 
        "1603": 1473344473000, 
        "1604": 1473677238000, 
        "1605": 1473689493000, 
        "1606": 1474364636000, 
        "1607": 1474466668000, 
        "1608": 1474991302000, 
        "1612": 1475071995000, 
        "1615": 1475072362000, 
        "1617": 1475073711000, 
        "1619": 1475075585000, 
        "1622": 1475130809000, 
        "1624": 1475146245000, 
        "1626": 1475153473000, 
        "1630": 1475218825000, 
        "1634": 1475223522000, 
        "1640": 1475234656000, 
        "1642": 1475242224000, 
        "1645": 1475494893000, 
        "1648": 1475496752000, 
        "1650": 1475497192000, 
        "1652": 1475752949000, 
        "1654": 1475830618000, 
        "1656": 1476106320000, 
        "1658": 1476193287000, 
        "1660": 1476435942000, 
        "1662": 1476446521000, 
        "1665": 1476460517000, 
        "1667": 1477294454000, 
        "1670": 1477306030000, 
        "1673": 1477397789000, 
        "1679": 1477553456000, 
        "1682": 1477994472000, 
        "1684": 1477996095000, 
        "1691": 1478253682000, 
        "1695": 1478255656000, 
        "1697": 1478255924000, 
        "1704": 1479203951000, 
        "1706": 1480320503000, 
        "1707": 1480324163000, 
        "1708": 1480340904000, 
        "1709": 1480345759000, 
        "1710": 1480939119000, 
        "1711": 1481014714000, 
        "1712": 1481018399000, 
        "1713": 1481027290000, 
        "1714": 1481099832000, 
        "1718": 1481116881000, 
        "1719": 1481120035000, 
        "1726": 1481705118000, 
        "1728": 1481709332000
    }, 
    "revision_to_hash": {
        "148": "dc72eec46cc631c85e165c5352602b17f92c0ae2", 
        "149": "4cf516a74436ee20d71b4f58524cc79f32c8e115", 
        "153": "4aa6176755ddfc50f8c53b92b821ad1acf510446", 
        "154": "89614db1e326d8b2057ae020c2c57a6610a8abe8", 
        "160": "473f9a457735924e55068dbdb990c5d0de48578c", 
        "161": "56cb49ceec6140da0abbb3aab88b493bb503feb7", 
        "176": "9d25b780cd1987d7f299e32764a586bb9911d928", 
        "207": "8afd9b48885cb2d483119b73cb9019010a937e14", 
        "209": "c3836a2f51ef0acb224dcf2cae4bf839e6b9555f", 
        "211": "965494da5860600cd697269fd9da870c02d9572f", 
        "214": "a1e339edfb086d211f8c23c776c521a411d6a910", 
        "239": "79bc82c08ab886610dbdc35b61fed65e844997a3", 
        "241": "88d96ab0348d57876d9ea23d2e839d8c5804ca78", 
        "273": "dd7b4d990e74839136f21c6e09d78609369ba17c", 
        "275": "de70ee341497c311901a1552980453236950a1df", 
        "280": "4ee8021632f9b4511814782964170f4c99db7fc1", 
        "282": "c7d2ffeef15fea9b3927473223d465e6f9366a07", 
        "284": "6cd647182768a8e66176cf862a7f129056e062c0", 
        "323": "bc2a18873bf2ea3b9404aacd8a05495b07fea3d6", 
        "328": "0f4e07b228e33afd2f700ccc65782264169a93fc", 
        "342": "37203a6e5c6544309042faedfbb054ee191d32ea", 
        "435": "6de4f0aa2f53759b31c219850c3830c909e48e21", 
        "881": "d50e46e65d7a6034c1d21188016e3f4fa9b9fb20", 
        "1015": "287e3163af2d138465eb38a306c2db153cbe49d9", 
        "1032": "1f3b6b782828a293d4c6ff1b300a620d56024085", 
        "1125": "ec85d4b08d8ec6b3733b4373b7998fac39be5305", 
        "1139": "01ba2700b7e0395d078569befcd6a4ed51bdb52e", 
        "1314": "1b04f52644b390640bcc68c8037fb2254a24d7f5", 
        "1316": "91d12be68852f229e9d609c5d43715d54f25a112", 
        "1393": "6e7986ef26c9f4dead4be7f0e10c89498651665a", 
        "1502": "d654c67c5aa68485817835650d223e7977f68aa3", 
        "1504": "9c79f10e241117161a7b2dd1a20ef46adf4677aa", 
        "1508": "5b8b5b3a62c71eb26ab3bc05e79b614a93db02e4", 
        "1586": "703a92937de2cf8636bae12ed9d5cd4098b39b92", 
        "1588": "3feb0baea4252825a317ae7c4e80248ca2b80a19", 
        "1590": "efd690af61cc78afa3faaf6ef3b357cf2e5a3941", 
        "1592": "13e70ab5a20288dacf992ea472ea649ec1149bec", 
        "1594": "ba0a3af1ab7d3e4f86314c823cb198e638f115be", 
        "1596": "33876e35668fa69760d4d553d3805678ba00f5a1", 
        "1599": "88fc7275884bec38b0e3027e254c923ddfbfdd7b", 
        "1600": "41e1b23e8077b33751682963a5dfcadb0e6263fa", 
        "1601": "4b4ab77d7ada25164c00c356fba33de742f2d6a4", 
        "1602": "30a48883c3a5e2930087d8f9f5f1b75c504418c1", 
        "1603": "628bb4c2071b66149fb59e0f947540cfa9ea4df1", 
        "1604": "fb56d4989041d1a8b96cdf533b3416c9c0ababb5", 
        "1605": "ec4c6ec7be166eab69ea196378b4620df7e2bbaa", 
        "1606": "d9a14753a1118841eef0b7e87873ba0bf3b12b6f", 
        "1607": "82998d147134507563a7fa9fec802a45b66aaa16", 
        "1608": "7dd4e0b0fec88237e8ab6046c21aac6404597763", 
        "1612": "aa1e8ba5451e9243813578d3ba1c736f37c3a5f0", 
        "1615": "5a532ac3f845e6353242293bf573ce441bcdc081", 
        "1617": "26409cd74550dbe01d4e9edee89880307ba03b33", 
        "1619": "b9be87f95f93931c8158fe7bed56c867ada69e9a", 
        "1622": "27439429e208d24cfd01bba0f3cc9f3ef1040ebd", 
        "1624": "c03397a5bc4e7f5363f19aeb95026a26d6d1f2d1", 
        "1626": "b2c18085b4339f76cacef604390ae2574b4eb801", 
        "1630": "cefd3f1a1f9abca1f0e7a9a823d19c2d6e9279e0", 
        "1634": "7d182de4445f370d574057509d762709090604e0", 
        "1640": "1d69ac7fff17acc604979000efb6d8084697ed27", 
        "1642": "1eb6650d49ee6625009cea2fc4ccf539c2784402", 
        "1645": "1b5b4207d98c0acb5b6284a00a35b704ced6961f", 
        "1648": "6e7af52e20cd2e1546164dd5348b8a71cda70734", 
        "1650": "04259cf5602e81e706af9ca3a54c1fd65cc2a792", 
        "1652": "030d80747acccf1e8c97e233dcad83414c9f302d", 
        "1654": "ab03c5164627da2064d99453ef7462b3acce9887", 
        "1656": "02f61e72f96d77cc716399e2c1ca588de5aee04b", 
        "1658": "c3cc0bc62dcddfc3e371df61d0132f805390db16", 
        "1660": "ef6a207a1b66640c4ac4a63f1c10b04c8f37ffb0", 
        "1662": "9879de33a4ad963d31ecd48dff4cdd9e9a5ba259", 
        "1665": "e5702ae6d44be148f6ba2c1c62bbc2273b831bd1", 
        "1667": "ecb98b1df6654c77ad10eec2efd2d38d129e4496", 
        "1670": "a3f752cd083774ad6504cbfcb81fe6da318d495c", 
        "1673": "6bb3768048c3f6dc5d5e577eda9e84dc53178247", 
        "1679": "eb5c5c8cf33f4c5d183e50e983bd2e6543306103", 
        "1682": "ef81a02245d3bc6956ff411872eee595a1545b93", 
        "1684": "5a29914ecee474972c151265aff5d58b94de7c32", 
        "1691": "85e2415553746d011ca809456e390e6196b5f821", 
        "1695": "ec2d1b6b3a25d112d9f670fcb17d55c516053db8", 
        "1697": "abc10284cedf8dfca488f7f1af441a116729665f", 
        "1704": "c4f21904f0e0735f663dc991f8b24d5494cf7e1c", 
        "1706": "5fc0a589595a63de6f7f1c8c4b2a6c5c9d921e5d", 
        "1707": "a475af40256d5f6a265532c9bf88f0744837651b", 
        "1708": "6403efbf6ea419d3dfb83617840e805938631958", 
        "1709": "ffa0c889cfc8921586181099320948331baf6acc", 
        "1710": "a085e2a90353ccb8110bab8eb1a6252f3e44b0c3", 
        "1711": "779850d96efd38fbfe87132aa9be0093cd04cd6c", 
        "1712": "984c8d0f17a6897cfd7d1d8c31f71a6591bb73b6", 
        "1713": "15409917cc4a41e1f6f84b2c10e48e96de0118bb", 
        "1714": "c91f7a5439fee1088c724e73eefbb4d77f471944", 
        "1718": "335773aa7cb30ab1d5ba55be7589673c3dde2ba8", 
        "1719": "8336dfe23b031f7f40f507798ea382d1cc8134ec", 
        "1726": "f2ba644d45af2df0ef06b139b3bebb3c056e8b66", 
        "1728": "934a467d93496916623d4566bf96617e07fa01d8"
    }, 
    "show_commit_url": "https://github.com/BlueBrain/NeuroM/commit/", 
    "tags": {
        "1.1.0": 1656, 
        "1.1.1": 1658, 
        "neurom-v0.0.0": 148, 
        "neurom-v0.0.1": 153, 
        "neurom-v0.0.1.dev0": 149, 
        "neurom-v0.0.10.dev0": 328, 
        "neurom-v0.0.2": 160, 
        "neurom-v0.0.2.dev0": 154, 
        "neurom-v0.0.3": 176, 
        "neurom-v0.0.3.dev0": 161, 
        "neurom-v0.0.4.dev2": 209, 
        "neurom-v0.0.5": 211, 
        "neurom-v0.0.6": 239, 
        "neurom-v0.0.6.dev0": 214, 
        "neurom-v0.0.7": 273, 
        "neurom-v0.0.7.dev0": 241, 
        "neurom-v0.0.8": 282, 
        "neurom-v0.0.8.dev0": 275, 
        "neurom-v0.0.8.dev1": 280, 
        "neurom-v0.0.9": 323, 
        "neurom-v0.0.9.dev0": 284, 
        "test1234": 207, 
        "test12345": 207, 
        "v0.0.10": 342, 
        "v0.0.11": 435, 
        "v0.0.12": 881, 
        "v0.0.13": 1015, 
        "v0.0.14": 1032, 
        "v0.0.15": 1125, 
        "v0.0.16": 1139, 
        "v0.0.17": 1314, 
        "v0.0.18": 1316, 
        "v0.1.0": 1393, 
        "v0.1.1": 1502, 
        "v0.1.2": 1508, 
        "v0.1.2.dev0": 1504, 
        "v1.0.0": 1586, 
        "v1.1.0": 1656, 
        "v1.1.1": 1658
    }
}